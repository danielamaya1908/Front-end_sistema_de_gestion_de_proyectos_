const API_URL = 'https://kw358s80-5000.use.devtunnels.ms/api/auth';

export const login = async (email: string, password: string): Promise<string> => {
  console.log('📧 Email:', email);
  console.log('🔐 Password:', password ? 'PROVIDED' : 'NO PROPORCIONADO');
  console.log('🌐 URL destino:', `${API_URL}/login`);
  
  const requestData = { email, password };
  console.log('📤 Datos a enviar:', requestData);

  console.log('🌍 Realizando petición fetch...');
  
  try {
    const response = await fetch(`${API_URL}/login`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData),
    });

    console.log('📡 Response recibida:');
    console.log('   - Status:', response.status);
    console.log('   - StatusText:', response.statusText);
    console.log('   - OK:', response.ok);
    console.log('   - Headers:', Object.fromEntries(response.headers.entries()));

    // Leer el cuerpo de la respuesta una sola vez
    const responseText = await response.text();
    
    if (!response.ok) {
      console.log('❌ Response no OK, procesando error...');
      
      let errorData;
      try {
        errorData = JSON.parse(responseText);
        console.log('❌ Error del servidor:', errorData);
      } catch (parseError) {
        console.log('❌ Error al parsear respuesta de error:', parseError);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      // Manejar errores específicos del servidor
      if (errorData.errors && Array.isArray(errorData.errors)) {
        const errorMessages = errorData.errors.map((err: any) => err.msg).join(', ');
        throw new Error(errorMessages);
      }
      
      throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
    }

    // Parsear respuesta exitosa
    const data = JSON.parse(responseText);
    console.log('✅ Login exitoso, datos recibidos:', data);
    
    return data.token;
    
  } catch (error) {
    console.log('💥 Error en login frontend:');
    console.log('   - Mensaje:', error.message);
    console.log('   - Tipo:', error.constructor.name);
    console.log('   - Stack:', error.stack);
    throw error;
  }
};

export const register = async (name: string, email: string, password: string): Promise<void> => {
  try {
    const response = await fetch(`${API_URL}/register`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ name, email, password }),
    });

    const responseText = await response.text();
    
    if (!response.ok) {
      let errorData;
      try {
        errorData = JSON.parse(responseText);
      } catch {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      if (errorData.errors && Array.isArray(errorData.errors)) {
        const errorMessages = errorData.errors.map((err: any) => err.msg).join(', ');
        throw new Error(errorMessages);
      }
      
      throw new Error(errorData.message || 'Registration failed');
    }

    // Si hay respuesta exitosa, parsearla
    if (responseText) {
      JSON.parse(responseText);
    }
    
  } catch (error) {
    console.error('Registration error:', error);
    throw error;
  }
};

export const forgotPassword = async (email: string): Promise<void> => {
  try {
    const response = await fetch(`${API_URL}/forgot-password`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email }),
    });

    const responseText = await response.text();
    
    if (!response.ok) {
      let errorData;
      try {
        errorData = JSON.parse(responseText);
      } catch {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      throw new Error(errorData.message || 'Failed to send recovery email');
    }

    // Si hay respuesta exitosa, parsearla
    if (responseText) {
      JSON.parse(responseText);
    }
    
  } catch (error) {
    console.error('Forgot password error:', error);
    throw error;
  }
};